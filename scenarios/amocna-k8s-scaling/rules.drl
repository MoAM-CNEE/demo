import io.github.hephaestusmetrics.model.metrics.Metric;
import org.k8loud.executor.actions.kubernetes.HorizontalScalingAction

global org.k8loud.executor.drools.UsableServices usableServices;
global org.k8loud.executor.drools.CronChecker cronChecker;

dialect "mvel"

rule "scale-front-end-up"
    when
        latencyMetric : Metric(
            queryTag == "front-end-latency",
            latency: value
        )
        replicasAvailableMetric : Metric(
            queryTag == "front-end-replicas-available",
            replicasAvailable: value
        )
        replicasUnavailableMetric : Metric(
            queryTag == "front-end-replicas-unavailable",
            replicasUnavailable: value
        )
        eval(latency > 60 &&
             cronChecker.checkPatternForSession("0 0/2 * ? * * *"))
    then
        System.out.println("Processing 'scale-front-end-up'...");

        latencyTarget = 60.0;
        efficiency = 0.8;
        latencyErrorRatio = (latency - latencyTarget) / latencyTarget;

        newReplicas = (int) Math.max(1, Math.ceil(replicasAvailable * (1 + latencyErrorRatio) / efficiency));
        deltaReplicas = (int) Math.max(0, newReplicas - replicasAvailable - replicasUnavailable);

        kubernetesService = usableServices.getKubernetesService();
        HorizontalScalingAction.builder()
                    .kubernetesService(kubernetesService)
                    .namespace("sock-shop")
                    .resourceType("Deployment")
                    .resourceName("front-end")
                    .replicas(deltaReplicas)
                    .build()
                    .execute();

        System.out.println("...Processed 'scale-front-end-up'");
end

rule "scale-front-end-down"
    when
        latencyMetric : Metric(
            queryTag == "front-end-latency",
            latency: value
        )
        replicasAvailableMetric : Metric(
            queryTag == "front-end-replicas-available",
            replicasAvailable: value
        )
        replicasUnavailableMetric : Metric(
            queryTag == "front-end-replicas-unavailable",
            replicasUnavailable: value
        )
        eval(latency < 20 &&
             cronChecker.checkPatternForSession("0 0/2 * ? * * *"))
    then
        System.out.println("Processing 'scale-front-end-down'...");

        latencyTarget = 20.0;
        efficiency = 0.8;
        latencyErrorRatio = (latency - latencyTarget) / latencyTarget;

        newReplicas = (int) Math.max(1, Math.floor(replicasAvailable * (1 + latencyErrorRatio) / efficiency));
        deltaReplicas = (int) Math.min(0, newReplicas - replicasAvailable - replicasUnavailable);

        kubernetesService = usableServices.getKubernetesService();
        HorizontalScalingAction.builder()
                .kubernetesService(kubernetesService)
                .namespace("sock-shop")
                .resourceType("Deployment")
                .resourceName("front-end")
                .replicas(deltaReplicas)
                .build()
                .execute();

        System.out.println("...Processed 'scale-front-end-down'");
end
