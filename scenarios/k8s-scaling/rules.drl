import io.github.hephaestusmetrics.model.metrics.Metric;
import org.k8loud.executor.actions.kubernetes.HorizontalScalingAction
import org.k8loud.executor.actions.moam.statemanager.UpdateEntityAction

global org.k8loud.executor.drools.UsableServices usableServices;
global org.k8loud.executor.drools.CronChecker cronChecker;

dialect "mvel"

rule "scale-front-end-up"
    when
        m : Metric(
            queryTag == "front-end-latency",
            latency: value
        );
        eval(latency > 60 &&
             cronChecker.checkPatternForSession("0/30 * * ? * * *"))
    then
        System.out.println("Processing 'scale-front-end-up'...");

        stateManagerService = usableServices.getStateManagerService();
        UpdateEntityAction.builder()
            .query("select * from entity where api_version = 'kubernetes.crossplane.io/v1alpha2' and kind = 'Object' and name = '09-front-end-dep'")
            .lambdas("{\".spec.forProvider.manifest.spec.replicas\": \". + 1\"}")
            .stateManagerService(stateManagerService)
            .build()
            .execute();

        System.out.println("...Processed 'scale-front-end-up'");
end

rule "scale-front-end-down"
    when
        m : Metric(
            queryTag == "front-end-latency",
            latency: value
        );
        eval(latency < 20 &&
             cronChecker.checkPatternForSession("0/30 * * ? * * *"))
    then
        System.out.println("Processing 'scale-front-end-down'...");

        stateManagerService = usableServices.getStateManagerService();
        UpdateEntityAction.builder()
            .query("select * from entity where api_version = 'kubernetes.crossplane.io/v1alpha2' and kind = 'Object' and name = '09-front-end-dep'")
            .lambdas("{\".spec.forProvider.manifest.spec.replicas\": \"(if . - 1 < 1 then 1 else . - 1 end)\"}")
            .stateManagerService(stateManagerService)
            .build()
            .execute();

        System.out.println("...Processed 'scale-front-end-down'");
end
