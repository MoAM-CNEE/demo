import io.github.hephaestusmetrics.model.metrics.Metric;
import org.k8loud.executor.actions.kubernetes.HorizontalScalingAction
import org.k8loud.executor.actions.moam.statemanager.EntityType
import org.k8loud.executor.actions.moam.statemanager.UpdateEntityAction

global org.k8loud.executor.drools.UsableServices usableServices;
global org.k8loud.executor.drools.CronChecker cronChecker;

dialect "mvel"

rule "scale-front-end-up"
    when
        m : Metric(
            queryTag == "front-end-latency",
            latency: value
        );
        eval(latency > 60 &&
             cronChecker.checkPatternForSession("* */3 * ? * * *"))
    then
        stateManagerService = usableServices.getStateManagerService();
        UpdateEntityAction.builder()
            .type(EntityType.ENVIRONMENT_ENTITY)
            .filterBy("select * from environment_entity where api_version = 'kubernetes.crossplane.io/v1alpha2' and kind = 'Object' and name = '09-front-end-dep' and namespace = 'scenario-k8s-scaling'")
            .lambdas("{\".spec.forProvider.manifest.spec.replicas\": \". + 1\"}")
            .stateManagerService(stateManagerService)
            .build()
            .execute();
end

rule "scale-front-end-down"
    when
        m : Metric(
            queryTag == "front-end-latency",
            latency: value
        );
        eval(latency < 20 &&
             cronChecker.checkPatternForSession("* */3 * ? * * *"))
    then
        stateManagerService = usableServices.getStateManagerService();
        UpdateEntityAction.builder()
            .type(EntityType.ENVIRONMENT_ENTITY)
            .filterBy("select * from environment_entity where api_version = 'kubernetes.crossplane.io/v1alpha2' and kind = 'Object' and name = '09-front-end-dep' and namespace = 'scenario-k8s-scaling'")
            .lambdas("{\".spec.forProvider.manifest.spec.replicas\": \". - 1\"}")
            .stateManagerService(stateManagerService)
            .build()
            .execute();
end

rule "scale-user-up"
    when
        m : Metric(
            queryTag == "user-lattency",
            latency: value
        );
        eval(latency > 10 &&
             cronChecker.checkPatternForSession("* */2 * ? * * *"))
    then
        stateManagerService = usableServices.getStateManagerService();
        UpdateEntityAction.builder()
            .type(EntityType.ENVIRONMENT_ENTITY)
            .filterBy("select * from environment_entity where api_version = 'kubernetes.crossplane.io/v1alpha2' and kind = 'Object' and name = '27-user-db-dep' and namespace = 'scenario-k8s-scaling'")
            .lambdas("{\".spec.forProvider.manifest.spec.replicas\": \". + 1\"}")
            .stateManagerService(stateManagerService)
            .build()
            .execute();
end

rule "scale-user-down"
    when
        latency : Metric(
            queryTag == "user-latency",
            v: value
        );
        eval(v < 2 &&
             cronChecker.checkPatternForSession("* */2 * ? * * *"))
    then
        stateManagerService = usableServices.getStateManagerService();
        UpdateEntityAction.builder()
            .type(EntityType.ENVIRONMENT_ENTITY)
            .filterBy("select * from environment_entity where api_version = 'kubernetes.crossplane.io/v1alpha2' and kind = 'Object' and name = '27-user-db-dep' and namespace = 'scenario-k8s-scaling'")
            .lambdas("{\".spec.forProvider.manifest.spec.replicas\": \". - 1\"}")
            .stateManagerService(stateManagerService)
            .build()
            .execute();
end
